---
title: "Mini Data-Analysis Deliverable 3"
author: "Maira Jimenez"
date: "`r Sys.Date()`"
output:
  github_document
---

## Introductiongithub_document

\# Welcome to your last milestone in your mini data analysis project!

In Milestone 1, you explored your data and came up with research questions. In Milestone 2, you obtained some results by making summary tables and graphs.

In this (3rd) milestone, you'll be sharpening some of the results you obtained from your previous milestone by:

-   Manipulating special data types in R: factors and/or dates and times.
-   Fitting a model object to your data, and extract a result.
-   Reading and writing data as separate files.

\*\*NOTE\*\*: The main purpose of the mini data analysis is to integrate what you learn in class in an analysis. Although each milestone provides a framework for you to conduct your analysis, it's possible that you might find the instructions too rigid for your data set. If this is the case, you may deviate from the instructions -- just make sure you're demonstrating a wide range of tools and techniques taught in this class.

## Instructions

\*\*To complete this milestone\*\*, edit [this very \`.Rmd\` file](<https://raw.githubusercontent.com/UBC-STAT/stat545.stat.ubc.ca/master/content/mini-project/mini-project-3.Rmd)> directly. Fill in the sections that are tagged with \`\<!--- start your work here--->\`.

\*\*To submit this milestone\*\*, make sure to knit this \`.Rmd\` file to an \`.md\` file by changing the YAML output settings from \`output: html_document\` to \`output: github_document\`. Commit and push all of your work to your mini-analysis GitHub repository, and tag a release on GitHub. Then, submit a link to your tagged release on canvas.

\*\*Points\*\*: This milestone is worth 40 points (compared to the usual 30 points): 30 for your analysis, and 10 for your entire mini-analysis GitHub repository. Details follow.

\*\*Research Questions\*\*: In Milestone 2, you chose two research questions to focus on. Wherever realistic, your work in this milestone should relate to these research questions whenever we ask for justification behind your work. In the case that some tasks in this milestone don't align well with one of your research questions, feel free to discuss your results in the context of a different research question.

# Setup

Begin by loading your data and the tidyverse package below:

```{r}
library(datateachr) # <- contain the data I picked!
library(tidyverse)
library(tsibble)
library(digest)
library(ggplot2)
library(hrbrthemes)
library(gtsummary)
library(forcats)
library(lubridate)
library(cowplot)

```

From Milestone 2, you chose two research questions. What were they? Put them here.

<!-------------------------- Start your work below ---------------------------->

**Research question 1**

Within the ACER genus, I would like to know if there is any relationship between the species and the diameter? And also if there is a relationship with the fact that some trees have a root barrier.

Perhaps some species of trees typically have a larger diameter. I only focused on STRATHCONA Neighborhood.

**Research question 2**

Choosing three `species_names`, I want to analyze the relationship between the `diameter`and the `date_planted`. The question I would like to answer is: can I find any correlations between these two values? I hypothesize that if the trees are older, the diameter would be larger.

<!----------------------------------------------------------------------------->

# Exercise 1: Special Data Types (10)

For this exercise, you'll be choosing two of the three tasks below -- both tasks that you choose are worth 5 points each.

But first, tasks 1 and 2 below ask you to modify a plot you made in a previous milestone. The plot you choose should involve plotting across at least three groups (whether by facetting, or using an aesthetic like colour). Place this plot below (you're allowed to modify the plot if you'd like). If you don't have such a plot, you'll need to make one. Place the code for your plot below.

<!-------------------------- Start your work below ---------------------------->

Just as a reminder, I'm analyzing the dataset **`vancouver_trees`**:

Acquired courtesy of The City of Vancouver's Open Data Portal. This data set has 146,611 rows with 20 variables.

```{r}
vancouver_trees
```

From this dataset, I filtered the information I'm interested in: the neighborhood `Strathcona` and all the trees from the genus `Acer`. I created a new dataset called `STRATHCONA_trees.`

```{r}

(STRATHCONA_trees<-vancouver_trees %>%
  filter(neighbourhood_name %in% ("STRATHCONA") & genus_name %in% ("ACER")))
```

Using the new dataset `STRATHCONA_trees`, I changed the visualization. The format of the values from the `date_planted` variable is \<date> year-day-month. Nevertheless, I found it is more convenient to change it to a "year month" format. We really don't need the day. For this, I use the function `yearmonth`:

```{r}
Strathcona_dates <- STRATHCONA_trees %>%
   mutate(date_planted = yearmonth(date_planted))
```

Unfortunately, if we consider the month, we are going to have many values. For this reason I separate the Year and the Month using the factor `separate:`

```{r}
(Strathcona_years <- Strathcona_dates%>% 
  separate(date_planted, into = c("Year", "Month"), sep=" "))
```

And now, I have created two new categorical variables `diameter_level` and `age_leve`l; each one has four groups from an existing numerical variable `diameter` and `Year` correspondingly (the variable `Year` is the one that I just created).

```{r}
Strathcona_years_level <- Strathcona_years  %>%
  filter(species_name==c("RUBRUM", "GINNALA", "PLATANOIDES")) %>%
  mutate(diameter_level = case_when(diameter < 5.00 ~ "a) very low",
                                 diameter < 10.00 ~ "b) low",
                                 diameter < 30.00 ~ "c) moderate",
                                 diameter < 40.00 ~ "d) high",
                                 TRUE ~ "very high")) %>% 
  mutate(age_level = case_when(Year < 1996 ~ "a) more than 25 years",
                                 Year < 2006 ~ "b) between 15-25 years old",
                                 Year < 2016 ~ "c) between 5-15 years old",
                                 TRUE ~ "d) recent"))
```

And finally, I created a graph that has two geom layers. Here, we can visualize the relationship between each of the age levels and the diameter. I divided it into the three species of interest and included the other variable I'm interested in analyzing: the root barrier.

```{r}
ggplot(Strathcona_years_level) + geom_boxplot(aes(x = diameter, y = age_level)) +
  labs(y = "How old are they", x = "Diameter") +
  ggtitle("Correlation diameter vs age") + theme_bw() + geom_jitter(aes(x = diameter, y = age_level, color=root_barrier)) + facet_grid(cols = vars(species_name))
```

<!----------------------------------------------------------------------------->

Now, choose two of the following tasks.

1.  Produce a new plot that reorders a factor in your original plot, using the \`forcats\` package (3 points). Then, in a sentence or two, briefly explain why you chose this ordering (1 point here for demonstrating understanding of the reordering, and 1 point for demonstrating some justification for the reordering, which could be subtle or speculative.)

2.  Produce a new plot that groups some factor levels together into an "other" category (or something similar), using the \`forcats\` package (3 points). Then, in a sentence or two, briefly explain why you chose this grouping (1 point here for demonstrating understanding of the grouping, and 1 point for demonstrating some justification for the grouping, which could be subtle or speculative.)

3.  If your data has some sort of time-based column like a date (but something more granular than just a year):

    1.  Make a new column that uses a function from the \`lubridate\` or \`tsibble\` package to modify your original time-based column. (3 points)

        -   Note that you might first have to \_make\_ a time-based column using a function like \`ymd()\`, but this doesn't count.

        -   Examples of something you might do here: extract the day of the year from a date, or extract the weekday, or let 24 hours elapse on your dates.

    2.  Then, in a sentence or two, explain how your new column might be useful in exploring a research question. (1 point for demonstrating understanding of the function you used, and 1 point for your justification, which could be subtle or speculative).

        -   For example, you could say something like "Investigating the day of the week might be insightful because penguins don't work on weekends, and so may respond differently".

<!-------------------------- Start your work below ---------------------------->

\*\*Task Number\*\*: 1

I chose task 1: I produce a new plot that reorders the factor `case_when`. In the first plot, the levels are ordered alphabetically; I used a bullet list with letters. The graph below shows how we can visualize it without the bullets [a), b),c), d)]:

```{r}
Strathcona_years_level_no <- Strathcona_years  %>%
  filter(species_name==c("RUBRUM", "GINNALA", "PLATANOIDES")) %>%
  mutate(diameter_level = case_when(diameter < 5.00 ~ "very low",
                                 diameter < 10.00 ~ "low",
                                 diameter < 30.00 ~ "moderate",
                                 diameter < 40.00 ~ "high",
                                 TRUE ~ "very high")) %>% 
  mutate(age_level = case_when(Year < 1996 ~ "more than 25 years",
                                 Year < 2006 ~ "between 15-25 years old",
                                 Year < 2016 ~ "between 5-15 years old",
                                 TRUE ~ "recent"))
```

```{r}
ggplot(Strathcona_years_level_no) + geom_boxplot(aes(x = diameter, y = age_level)) +
  labs(y = "How old are they", x = "Diameter") +
  ggtitle("Correlation diameter vs age") + theme_bw() + geom_jitter(aes(x = diameter, y = age_level, color=root_barrier)) + facet_grid(cols = vars(species_name))
```

**The age levels are not ordered accordingly to how old they are, and it is not easy for the viewer. Again, they are *ordered alphabetically* from bottom to top (starting with `between 15-25` and finishing with `recent`).**

Nevertheless, the `forcats` package is really helpful with this. Instead of adding "a), b), c), d)", I can use factor and order the levels: levels=c("more than 25 years", "between 15-25 years old","between 5-15 years old", "recent". Moreover, right now we don't need column such as civic_number, the longitud and latitude. Therefore, we can get rid of them using `selec`t function. Also, the names for each column (variable) is understandable but not "assigned". This value indicates whether the address is made up to associate the tree with a nearby lot (Y=Yes or N=No). I find convenient to change the name to "Associated_to_lot" using the `fct_recode` function.

```{r}
(Strathcona_years_level_yes <- Strathcona_years %>%
  select(-civic_number,-longitude,-latitude)%>%
    rename(Associated_to_lot= assigned )%>%
  filter(species_name==c("RUBRUM", "GINNALA", "PLATANOIDES")) %>%
  mutate(diameter_level = factor(case_when(diameter < 5.00 ~ "Very low",
                                 diameter < 10.00 ~ "Low",
                                 diameter < 30.00 ~ "Moderate",
                                 diameter < 40.00 ~ "High",
                                 TRUE ~ "Very high"), levels= c("Very low", "Low", "Moderate", "High", "Very high"))) %>% 
  mutate(age_level = factor(case_when(Year < 1996 ~ "More than 25 years",
                                 Year < 2006 ~ "Between 15-25 years old",
                                 Year < 2016 ~ "Between 5-15 years old",
                                 TRUE ~ "Recent"), levels=c("More than 25 years", "Between 15-25 years old","Between 5-15 years old", "Recent"))))
```

In the next plot we can visualize that the levels are order accordingly with time, which is important to see if there is a direct correlation with the diameter. The oldest is in the bottom and the earliest on the top. Moreover, I centered the plot tittle using `hjust` and changed the colour labels.

```{r}
ggplot(Strathcona_years_level_yes) + geom_boxplot(aes(x = diameter, y = age_level)) +
  labs(y = "How old are they", x = "Diameter") +
  ggtitle("Correlation diameter vs age") + theme_bw() + geom_jitter(aes(x = diameter, y = age_level, color=root_barrier)) + facet_grid(cols = vars(species_name)) + theme(plot.title = element_text(hjust = 0.5))+ scale_colour_discrete(labels = c("Without root barrier", "With root barrier")) + labs(colour="")
```

From this graph we can conclude that there is not a correlation between the diameter and the age from the Ginnala, Platanoides and rubrum species trees. More analysis per tree are needed.

<!----------------------------------------------------------------------------->

<!-------------------------- Start your work below ---------------------------->

\*\*Task Number\*\*: 3

I chose task 3 since I have a time-based column `<date>` which has year-day-month values.

From the package `lubridate` I modified my original time-based column into only year-month values. Afterwards, I looked into the number of the month using the function `month`, January=1, February= 2 etc. and I created a new column called `num_month.` Using the function `Group_by` and `summarise`, I created a tibble where I can see the numbers of trees planted per month. Finally, I used the function drop_na to get rid of all the NA values that correspond to the trees that we do not know when they were planted.

```{r}
vancouver_trees

(STRATHCONA_trees<-vancouver_trees %>%
  filter(neighbourhood_name %in% ("STRATHCONA") & genus_name %in% ("ACER")))

(Strathcona_dates <- STRATHCONA_trees %>%
    mutate(num_month =month(date_planted))%>%
   mutate(date_planted = yearmonth(date_planted)))

(observation_month <- Strathcona_dates %>%
    group_by(num_month) %>%
    summarise(Count = n()))%>%
drop_na()

```

What can information I get from this tibble?

It is said that the best time to plant is during the fall (September 1 to November 30). For this reason, I was wondering which are the months when more trees were planted. To my surprise, trees were planted during the first four months of the year; it corresponds to winter and the beginning of spring. Using the function **`arrange`**, I ordered from the most significant number of trees planted to the least. I can conclude that most of the trees were planted during winter.

```{r}
(observation_month2 <- Strathcona_dates %>%
    group_by(num_month) %>%
    summarise(Count = n()))%>%
  arrange(desc(Count))%>%
drop_na()
```

<!----------------------------------------------------------------------------->

# Exercise 2: Modelling

## 2.0 (no points)

Pick a research question, and pick a variable of interest (we'll call it "Y") that's relevant to the research question. Indicate these.

<!-------------------------- Start your work below ---------------------------->

\*\*Research Question\*\*:

Choosing three `species_names`, I want to analyze the relationship between the `diameter`and the `date_planted`. The question I would like to answer is: can I find any correlations between these two values? I hypothesize that if the trees are older, the diameter would be larger.

\*\*Variable of interest\*\*: Y=diameter

<!----------------------------------------------------------------------------->

## 2.1 (5 points)

Fit a model or run a hypothesis test that provides insight on this variable with respect to the research question. Store the model object as a variable, and print its output to screen. We'll omit having to justify your choice, because we don't expect you to know about model specifics in STAT 545.

-   \*\*Note\*\*: It's OK if you don't know how these models/tests work. Here are some examples of things you can do here, but the sky's the limit.
-   You could fit a model that makes predictions on Y using another variable, by using the \`lm()\` function.
-   You could test whether the mean of Y equals 0 using \`t.test()\`, or maybe the mean across two groups are different using \`t.test()\`, or maybe the mean across multiple groups are different using \`anova()\` (you may have to pivot your data for the latter two).
-   You could use \`lm()\` to test for significance of regression.

<!-------------------------- Start your work below ---------------------------->

Choosing three `species_names`. I want to analyze the relationship between the `diameter`and the `date_planted`. The question I would like to answer is: can I find any correlations between these two values? I hypothesize that if the trees are older, the diameter would be larger.

I created a new column with only the year from the `planted-date`. With the function `min`, I get the oldest year which is 1993. Using this year I use the `lm` function to fit a model that makes predictions. Use `I()` to make the intercept so that the "beginning" of our dataset (1993) corresponds to '0' in the model. This makes all the years in the data set relative to the first year, 1993. I store the outcome into `fitmodel.`

And finally I used `unclass` function to take a look at how the `lm()` object actually looks like.

```{r}
vancouver_trees
(RUBRUM_trees<-vancouver_trees %>%
  filter(neighbourhood_name %in% ("STRATHCONA") & species_name  %in% ("RUBRUM")))

(RUBRUM_year <- STRATHCONA_trees %>%
    mutate(year2 =year(date_planted)))

min(RUBRUM_year$year2, na.rm = TRUE)
  
fitmodel <- lm(diameter~ I(year2-1993), RUBRUM_year)
fitmodel

unclass(fitmodel)
```

<!----------------------------------------------------------------------------->

## 2.2 (5 points)

Produce something relevant from your fitted model: either predictions on Y, or a single value like a regression coefficient or a p-value.

-   Be sure to indicate in writing what you chose to produce.
-   Your code should either output a tibble (in which case you should indicate the column that contains the thing you're looking for), or the thing you're looking for itself.
-   Obtain your results using the \`broom\` package if possible. If your model is not compatible with the broom function you're needing, then you can obtain your results by some other means, but first indicate which broom function is not compatible.

<!-------------------------- Start your work below ---------------------------->

Using the `tidy` function from the `broom` package ("::" means I'm taking tidy from broom), I produced a tidy tibble from `fitmodel`, where I can see the p-value.

```{r}
(broom::tidy(fitmodel))
```

<!----------------------------------------------------------------------------->

# Exercise 3: Reading and writing data

Get set up for this exercise by making a folder called \`output\` in the top level of your project folder / repository. You'll be saving things there.

## 3.1 (5 points)

Take a summary table that you made from Milestone 2 (Exercise 1.2), and write it as a csv file in your \`output\` folder. Use the \`here::here()\` function.

-   \*\*Robustness criteria\*\*: You should be able to move your Mini Project repository / project folder to some other location on your computer, or move this very Rmd file to another location within your project repository / folder, and your code should still work.
-   \*\*Reproducibility criteria\*\*: You should be able to delete the csv file, and remake it simply by knitting this Rmd file.

<!-------------------------- Start your work below ---------------------------->

I took a summary table from Milestone 2 where I got the number of trees cut out for each street in Kitsilano. I arranged it in descending order to know where I could find more cutout trees.

```{r}
Cut_trees<-vancouver_trees %>%
  filter(plant_area %in% ("C")& neighbourhood_name %in% ("KITSILANO"))

observations_cut <- Cut_trees %>%
    group_by(on_street) %>%
    summarise(Count = n())%>%
  arrange(desc(Count))

print(observations_cut)
```

Using the function `write_csv` I'm able to save this tibble in the folder "output" inside my repository with the tittle "mytable.csv".

```{r}
write_csv(observations_cut, here::here("~/Desktop/STAT545/myrepo/mda-milestone/output", "mytable.csv"))
```

<!----------------------------------------------------------------------------->

## 3.2 (5 points)

Write your model object from Exercise 2 to an R binary file (an RDS), and load it again. Be sure to save the binary file in your \`output\` folder. Use the functions \`saveRDS()\` and \`readRDS()\`.

-   The same robustness and reproducibility criteria as in 3.1 apply here.

<!-------------------------- Start your work below ---------------------------->

In order to get a R binary file from `fitmodel` I use the function `saveRDS`. Also, use `here::here` function to save it in the same `output` folder.

```{r}
saveRDS(fitmodel, here::here("~/Desktop/STAT545/myrepo/mda-milestone/output", "fitmodel.rds"))
```

In order to read this file that I just created, I use the function `readRDS.` But first, I need to use the function `gzfile`to unzip it from the folder `output` and I stored it in `fitmodel2`. Using the function `readRDS,` I will be able to visualize the information again.

```{r}
fitmodel2 <- gzfile(here::here("~/Desktop/STAT545/myrepo/mda-milestone/output", "fitmodel.rds"))
readRDS(fitmodel2)

```

<!----------------------------------------------------------------------------->

# Tidy Repository

Now that this is your last milestone, your entire project repository should be organized. Here are the criteria we're looking for.

## Main README (3 points)

There should be a file named \`README.md\` at the top level of your repository. Its contents should automatically appear when you visit the repository on GitHub.

Minimum contents of the README file:

-   In a sentence or two, explains what this repository is, so that future-you or someone else stumbling on your repository can be oriented to the repository.
-   In a sentence or two (or more??), briefly explains how to engage with the repository. You can assume the person reading knows the material from STAT 545A. Basically, if a visitor to your repository wants to explore your project, what should they know?

Once you get in the habit of making README files, and seeing more README files in other projects, you'll wonder how you ever got by without them! They are tremendously helpful.

## File and Folder structure (3 points)

You should have at least four folders in the top level of your repository: one for each milestone, and one output folder. If there are any other folders, these are explained in the main README.

Each milestone document is contained in its respective folder, and nowhere else.

Every level-1 folder (that is, the ones stored in the top level, like "Milestone1" and "output") has a \`README\` file, explaining in a sentence or two what is in the folder, in plain language (it's enough to say something like "This folder contains the source for Milestone 1").

## Output (2 points)

All output is recent and relevant:

-   All Rmd files have been \`knit\`ted to their output, and all data files saved from Exercise 3 above appear in the \`output\` folder.
-   All of these output files are up-to-date -- that is, they haven't fallen behind after the source (Rmd) files have been updated.
-   There should be no relic output files. For example, if you were knitting an Rmd to html, but then changed the output to be only a markdown file, then the html file is a relic and should be deleted.

Our recommendation: delete all output files, and re-knit each milestone's Rmd file, so that everything is up to date and relevant.

PS: there's a way where you can run all project code using a single command, instead of clicking "knit" three times. More on this in STAT 545B!

## Error-free code (1 point)

This Milestone 3 document knits error-free. (We've already graded this aspect for Milestone 1 and 2)

## Tagged release (1 point)

You've tagged a release for Milestone 3. (We've already graded this aspect for Milestone 1 and 2)
